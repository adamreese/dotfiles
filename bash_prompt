#!/bin/bash

# bash_prompt

# Example:
# nicolas@host: ~/.dotfiles on master [+!?$]
# $

# Screenshot: http://i.imgur.com/DSJ1G.png
# iTerm2 prefs: import Solarized theme (disable bright colors for bold text)
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

prompt_git() {
  local s=""
  local branchName=""

  # check if the current directory is in a git repository
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

      # ensure index is up to date
      git update-index --really-refresh  -q &>/dev/null

      # check for uncommitted changes in the index
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s="$s+";
      fi

      # check for unstaged changes
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s="$s!";
      fi

      # check for untracked files
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s="$s?";
      fi

      # check for stashed files
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s="$s$";
      fi

    fi

    # get the short symbolic ref
    # if HEAD isn't a symbolic ref, get the short SHA
    # otherwise, just give up
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      printf "(unknown)")"

    [ -n "$s" ] && s=" [$s]"

    printf "%s" "$1$branchName$s"
  else
    return
  fi
}

set_prompts() {

  local bold=""
  local reset="\e[0m"
  local black="\e[0;30m"
  local blue="\e[0;34m"
  local cyan="\e[0;36m"
  local green="\e[0;32m"
  local orange="\e[0;33m"
  local purple="\e[0;35m"
  local red="\e[0;31m"
  local white="\e[0;37m"
  local yellow="\e[0;33m"

  local hostStyle=""
  local userStyle=""

  # build the prompt

  # logged in as root
  if [[ "$USER" == "root" ]]; then
    userStyle="\[$bold$red\]"
  else
    userStyle="\[$orange\]"
  fi

  # connected via ssh
  if [[ "$SSH_TTY" ]]; then
    hostStyle="\[$bold$red\]"
  else
    hostStyle="\[$yellow\]"
  fi

  # set the terminal title to the current working directory
  PS1="\[\033]0;\w\007\]"

  PS1+="\n" # newline
  PS1+="\[$reset$white\]["
  PS1+="\[$green\]\w" # working directory
  PS1+="\[$reset$white\]]"
  PS1+="\$(prompt_git \"$white on $blue\")" # git repository details
  PS1+="\n"
  PS1+="\[$reset$white\]\$ \[$reset\]" # $ (and reset color)

  export PS1
}

set_prompts
unset set_prompts
