# vim: ft=zsh :

###############################################################################
# docker-machine
###############################################################################

# _docker_machine_use
#
# Usage:
#   _docker_machine_use [machine_name]
#
# Source environment variables of machine.  Start machine if it is not
# running.
_docker_machine_use() {
  local machine="$1"

  if ! _docker_machine_running "$machine"; then
    docker-machine start "$machine"
  fi

  eval "$(docker-machine env "$machine")"
}

# _docker_machine_running
#
# Usage:
#   _docker_machine_running [machine_name]
#
# Returns:
#   0  If the machine is currently running
#   1  If not.
_docker_machine_running() {
  local machine="$1"

  if [[ "$(docker-machine status "$machine")" != "Running" ]]; then
    return 1
  else
    return 0
  fi
}

_docker_machine_init() {
  local name="${1:-default}"

  local driver=xhyve
  local disk_size=10000
  local cpus=2
  local mem=20000

  if ! command -v docker-machine-driver-xhyve >/dev/null 2>&1; then
    driver=virtualbox
  fi

  docker-machine --debug create "$name" \
    --driver "$driver" \
    --xhyve-disk-size "$disk_size" \
    --xhyve-cpu-count "$cpus" \
    --xhyve-memory-size "$mem" \
    --xhyve-virtio-9p

}

# Source default docker-machine if it is running
# eval "$(docker-machine env default 2> /dev/null)"

# dm
#
# Commands:
#   dm use         Start machine and source environment
#   dm init        Create a new machine
# -----------------------------------------------------------------------------
_cmd="$1"
_machine="${2:-default}"

case "$_cmd" in
  use)
    _docker_machine_use "$_machine"
    ;;
  init)
    _docker_machine_init "$_machine"
    ;;
  *)
    docker-machine "$@"
esac

