" =======================================================================
" vimrc {{{1
" =======================================================================

if has('vim_starting') | set encoding=utf-8 nobomb | endif
scriptencoding utf-8

" -----------------------------------------------------------------------
" Environment: {{{1
" -----------------------------------------------------------------------

" Create global config for cache and data directories
let g:cache_dir = expand($HOME.'/.cache/vim/')
let g:data_dir  = expand($HOME.'/.local/share/vim/')
let g:vim_dir   = fnamemodify(resolve(expand('<sfile>:p')), ':h')

let g:nvim = has('nvim')
let g:tmux = exists('$TMUX')

" -----------------------------------------------------------------------
" Plug: {{{1
" -----------------------------------------------------------------------
call ar#ensure_plugin_manager()

call plug#begin(g:vim_dir . '/vendor')

Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'AndrewRadev/bufferize.vim',      { 'on': [ 'Bufferize' ] }
Plug 'Shougo/context_filetype.vim'
Plug 'Shougo/echodoc.vim'
Plug 'Shougo/vimproc.vim',             { 'build': 'make' }
Plug 'benekastah/neomake',             { 'on': 'Neomake' }
Plug 'blueyed/vim-qf_resize'
Plug 'chrisbra/unicode.vim'
Plug 'christoomey/vim-tmux-navigator', ar#plug_if(g:tmux)
Plug 'editorconfig/editorconfig-vim'
Plug 'haya14busa/incsearch.vim'
Plug 'heavenshell/vim-jsdoc',          { 'on': ['<Plug>(jsdoc)', 'JsDoc'] }
Plug 'itchyny/lightline.vim'
Plug 'junegunn/vim-easy-align',        { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar',              { 'on': 'TagbarToggle' }
Plug 'mhinz/vim-sayonara',             { 'on': 'Sayonara' }
Plug 'mileszs/ack.vim'
Plug 'osyo-manga/vim-anzu'
Plug 'romainl/vim-qf'
Plug 'sbdchd/neoformat',               { 'on': 'Neoformat' }
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-surround'
Plug 'tweekmonster/startuptime.vim'
Plug 'w0ng/vim-hybrid'

" -- Version Control ---------------------------------------------------
Plug 'airblade/vim-gitgutter'
Plug 'rhysd/committia.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-rhubarb'

" -- Languages ----------------------------------------------------------
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'cespare/vim-toml'
Plug 'chrisbra/vim-sh-indent'
Plug 'chrisbra/vim-zsh'
Plug 'fatih/vim-go'
Plug 'jparise/vim-graphql',            { 'for': 'graphql' }
Plug 'kana/vim-gf-user',               { 'for': 'vim' }
Plug 'leafgarland/typescript-vim'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'sebdah/vim-delve',               { 'for': 'go' }
Plug 'sgur/vim-gf-autoload',           { 'for': 'vim' }
Plug 'ternjs/tern_for_vim',            { 'do': 'yarn install' }
Plug 'tmux-plugins/vim-tmux'
Plug 'uarun/vim-protobuf'
Plug 'vim-ruby/vim-ruby'

" -- Completion ---------------------------------------------------------
Plug 'Raimondi/delimitMate'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'

Plug 'Shougo/deoplete.nvim',           ar#plug_if(g:nvim, { 'do': ':UpdateRemotePlugins' })
Plug 'Shougo/neco-vim',                ar#plug_if(g:nvim, { 'for': 'vim' })
Plug 'carlitux/deoplete-ternjs',       ar#plug_if(g:nvim, { 'do': ':UpdateRemotePlugins' })
Plug 'mhartington/nvim-typescript',    ar#plug_if(g:nvim, { 'do': ':UpdateRemotePlugins' })
Plug 'zchee/deoplete-go',              ar#plug_if(g:nvim, { 'for': 'go', 'do': 'make'})
Plug 'zchee/deoplete-zsh',             ar#plug_if(g:nvim)

call plug#end()

" -----------------------------------------------------------------------
" Map Leader: {{{1
" -----------------------------------------------------------------------

let g:mapleader = ','
let g:maplocalleader = ','

" -----------------------------------------------------------------------
" Local Settings: {{{1
" -----------------------------------------------------------------------

let s:vimrc_local = g:vim_dir . '/vimrc.local'
if filereadable(s:vimrc_local)
  execute 'source ' . s:vimrc_local
endif

" Modeline {{{1
" -----------------------------------------------------------------------
" vim:foldmethod=marker
