" =======================================================================
" vimrc {{{1
" =======================================================================

if has('vim_starting') | set encoding=utf-8 nobomb | endif
scriptencoding utf-8

" -----------------------------------------------------------------------
" Environment: {{{1
" -----------------------------------------------------------------------

" Create global config for cache and data directories
let s:editor    = has('nvim') ? 'nvim' : 'vim'
let g:cache_dir = expand('$HOME/.cache/' . s:editor)
let g:data_dir  = expand('$HOME/.local/share/' . s:editor)
let g:vim_dir   = fnamemodify(resolve(expand('<sfile>')), ':p:h')

" -----------------------------------------------------------------------
" Plug: {{{1
" -----------------------------------------------------------------------
call ar#plug#EnsureManager()

" Conditionally load plugins.
" https://github.com/junegunn/vim-plug/wiki/tips#conditional-activation
function! PlugIf(condition, ...) abort
  let l:opts = get(a:000, 0, {})
  return a:condition ? l:opts : extend(l:opts, { 'on': [], 'for': [] })
endfunction

call plug#begin(g:vim_dir . '/vendor')

let g:bufferize_command = 'tabnew'
Plug 'AndrewRadev/bufferize.vim',      { 'on': [ 'Bufferize' ] }
Plug 'Shougo/context_filetype.vim'

let g:echodoc_enable_at_startup  = 1
let g:echodoc#type = 'virtual'
Plug 'Shougo/echodoc.vim'
Plug 'benekastah/neomake',             { 'on': 'Neomake' }
Plug 'blueyed/vim-qf_resize'
Plug 'chrisbra/unicode.vim',           {'on': ['UnicodeName', 'UnicodeTable']}
Plug 'christoomey/vim-tmux-navigator', PlugIf(exists('$TMUX'))
Plug 'editorconfig/editorconfig-vim'
Plug 'filipekiss/cursed.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align',        { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'lewis6991/gitsigns.nvim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'lvht/tagbar-markdown'
Plug 'majutsushi/tagbar',              { 'on': 'TagbarToggle' }
Plug 'mileszs/ack.vim'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'nvim-lua/plenary.nvim'
Plug 'osyo-manga/vim-anzu'
Plug 'preservim/nerdtree'
Plug 'romainl/vim-qf'
Plug 'sbdchd/neoformat',               { 'on': 'Neoformat' }
Plug 'towolf/vim-helm'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-surround'
Plug 'tweekmonster/startuptime.vim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'

let g:colorswatch_exclusion_pattern = 'LightLine.\+'
Plug 'cocopon/colorswatch.vim',     { 'on': ['ColorSwatchGenerate', 'Inspecthi'] }

nnoremap <silent> zs :<C-U>Inspecthi<CR>
Plug 'cocopon/inspecthi.vim', { 'on': [ 'Inspecthi' ] }

" -- Version Control ---------------------------------------------------
Plug 'rhysd/committia.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-rhubarb'

" -- Languages ----------------------------------------------------------
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'cespare/vim-toml'
Plug 'chrisbra/vim-sh-indent'
Plug 'chrisbra/vim-zsh'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go'
Plug 'jparise/vim-graphql'
Plug 'leafgarland/typescript-vim'
Plug 'neoclide/jsonc.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'othree/yajs.vim'
Plug 'pangloss/vim-javascript', PlugIf(v:false)
Plug 'plasticboy/vim-markdown'
Plug 'rhysd/vim-wasm'
Plug 'rust-lang/rust.vim'
Plug 'simrat39/rust-tools.nvim'
Plug 'tmux-plugins/vim-tmux'
Plug 'uarun/vim-protobuf'
Plug 'vim-ruby/vim-ruby'
Plug 'mityu/vim-applescript'

Plug 'tweekmonster/exception.vim'
command! WTF call exception#trace()

" -- LSP ----------------------------------------------------------------
let g:nvimlsp = has('nvim-0.5.0')

Plug 'neovim/nvim-lspconfig',    PlugIf(g:nvimlsp)
Plug 'hrsh7th/nvim-compe',       PlugIf(g:nvimlsp)
Plug 'nvim-lua/lsp-status.nvim', PlugIf(g:nvimlsp)
Plug 'ojroques/nvim-lspfuzzy',   PlugIf(g:nvimlsp)

call plug#end()

" -----------------------------------------------------------------------
" Map Leader: {{{1
" -----------------------------------------------------------------------

let g:mapleader = ','
let g:maplocalleader = ','
