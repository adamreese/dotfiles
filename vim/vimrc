" =======================================================================
" vimrc {{{1
" =======================================================================

if has('vim_starting') | set encoding=utf-8 nobomb | endif
scriptencoding utf-8

" -----------------------------------------------------------------------
" Environment: {{{1
" -----------------------------------------------------------------------

" Create global config for cache and data directories
let g:cache_dir = expand('$HOME/.cache/vim')
let g:data_dir  = expand('$HOME/.local/share/vim')
let g:vim_dir   = fnamemodify(resolve(expand('<sfile>')), ':p:h')

" -----------------------------------------------------------------------
" Plug: {{{1
" -----------------------------------------------------------------------
call ar#ensure_plugin_manager()

call plug#begin(g:vim_dir . '/vendor')

Plug 'AndrewRadev/bufferize.vim',      { 'on': [ 'Bufferize' ] }
Plug 'AndrewRadev/splitjoin.vim'
Plug 'Shougo/context_filetype.vim'
Plug 'Shougo/echodoc.vim'
Plug 'Shougo/vimproc.vim',             { 'build': 'make' }
Plug 'adamreese/vim-hybrid'
Plug 'benekastah/neomake',             { 'on': 'Neomake' }
Plug 'blueyed/vim-qf_resize'
Plug 'chrisbra/unicode.vim'
Plug 'christoomey/vim-tmux-navigator', ar#plug_if(exists('$TMUX'))
Plug 'editorconfig/editorconfig-vim'
Plug 'haya14busa/incsearch.vim'
Plug 'heavenshell/vim-jsdoc',          { 'on': ['<Plug>(jsdoc)', 'JsDoc'] }
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align',        { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'ludovicchabant/vim-gutentags'
Plug 'lvht/tagbar-markdown'
Plug 'majutsushi/tagbar',              { 'on': 'TagbarToggle' }
Plug 'mileszs/ack.vim'
Plug 'osyo-manga/vim-anzu'
Plug 'romainl/vim-qf'
Plug 'sbdchd/neoformat',               { 'on': 'Neoformat' }
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-surround'
Plug 'tweekmonster/startuptime.vim'

" -- Version Control ---------------------------------------------------
Plug 'airblade/vim-gitgutter'
Plug 'hotwatermorning/auto-git-diff'
Plug 'rhysd/committia.vim'
Plug 'rhysd/git-messenger.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-rhubarb'

" -- Languages ----------------------------------------------------------
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'cespare/vim-toml'
Plug 'chrisbra/vim-sh-indent'
Plug 'chrisbra/vim-zsh'
Plug 'elzr/vim-json'
Plug 'fatih/vim-go'
Plug 'jparise/vim-graphql'
Plug 'leafgarland/typescript-vim'
Plug 'neoclide/jsonc.vim'
Plug 'pangloss/vim-javascript', PlugIf(v:false)
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'tbastos/vim-lua'
Plug 'tmux-plugins/vim-tmux'
Plug 'uarun/vim-protobuf'
Plug 'vim-ruby/vim-ruby'

" -- Completion ---------------------------------------------------------
Plug 'neoclide/coc.nvim', PlugIf(has('nvim'), {'do': 'yarn install --frozen-lockfile'})
Plug 'neoclide/coc-neco', PlugIf(has('nvim'))
Plug 'tjdevries/coc-zsh', PlugIf(has('nvim'))

Plug 'honza/vim-snippets'
Plug 'Shougo/neco-syntax'
Plug 'Shougo/neco-vim',            PlugIf(has('nvim'), { 'for': 'vim' })

call plug#end()

" -----------------------------------------------------------------------
" Map Leader: {{{1
" -----------------------------------------------------------------------

let g:mapleader = ','
let g:maplocalleader = ','

" -----------------------------------------------------------------------
" Local Settings: {{{1
" -----------------------------------------------------------------------

let s:vimrc_local = g:vim_dir . '/vimrc.local'
if filereadable(s:vimrc_local)
  execute 'source ' . s:vimrc_local
endif
