" =======================================================================
" vimrc {{{
" =======================================================================

if has('vim_starting') | set encoding=utf-8 nobomb | endif
scriptencoding utf-8

let $cache_dir = expand($HOME.'/.cache/vim')
let $data_dir  = expand($HOME.'/.local/share/vim')

" }}}
" =======================================================================
" Plugins {{{
" =======================================================================

call plug#begin('~/.vim/plugged')

Plug 'FelikZ/ctrlp-py-matcher'
Plug 'Shougo/vimproc.vim',      { 'build': 'make' }
Plug 'airblade/vim-gitgutter'
Plug 'benekastah/neomake',      { 'on': ['Neomake'] }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf',            { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'kepbod/quick-scope'
Plug 'majutsushi/tagbar',       { 'on': 'TagbarToggle' }
Plug 'rhysd/committia.vim'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree'
Plug 'slack/vim-align'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-surround'
Plug 'tweekmonster/startuptime.vim'
Plug 'vimwiki/vimwiki'
Plug 'w0ng/vim-hybrid'

if exists('$TMUX')
  Plug 'christoomey/vim-tmux-navigator'
endif

" -- Languages ----------------------------------------------------------
Plug 'chrisbra/vim-zsh',        { 'for': 'zsh' }
Plug 'fatih/vim-go',            { 'for': 'go' }
Plug 'syngan/vim-vimlint',      { 'for': 'vim' }
Plug 'tmux-plugins/vim-tmux',   { 'for': 'tmux' }
Plug 'vim-ruby/vim-ruby',       { 'for': 'ruby' }
Plug 'ynkdir/vim-vimlparser',   { 'for': 'vim' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }

" -- Completion ---------------------------------------------------------
Plug 'Raimondi/delimitMate'
if has('nvim')
  function! DoRemote(arg)
    UpdateRemotePlugins
  endfunction
  Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
  Plug 'zchee/deoplete-go',    { 'for': 'go', 'do': 'make'}
  Plug 'Shougo/neco-vim',      { 'for': 'vim' }
else
  Plug 'Shougo/neocomplete'
endif

call plug#end()

" }}}
" =======================================================================
" Settings {{{
" =======================================================================

" -----------------------------------------------------------------------
" General {{{
" -----------------------------------------------------------------------

set autowrite                " Automatically save before :next, :make etc.
set autoread                 " Set to auto read when a file is changed from the outside
set hidden
set noswapfile               " Don't use swapfile
set magic                    " For regular expressions turn magic on
set nobackup                 " Don't create annoying backup files
set noerrorbells
set novisualbell
set shell=$SHELL
set dictionary=/usr/share/dict/words
set history=1000

if has('vim_starting')
  if &compatible
    set nocompatible
  endif
endif

if exists('$TMUX')
  set ttyfast
  set ttymouse=sgr
endif

" }}}
" -----------------------------------------------------------------------
" Search {{{
" -----------------------------------------------------------------------

set ignorecase               " Search case insensitive...
set smartcase                " ... but not it begins with upper case

if exists('+inccommand')
  set inccommand=nosplit
endif

" }}}
" -----------------------------------------------------------------------
" Performance {{{
" -----------------------------------------------------------------------

set lazyredraw               " only redraw when needed
set ttimeout
set ttimeoutlen=10
set timeout
set timeoutlen=1000

" Don't try to highlight long lines.
" This fixes some performance problems on huge files.
set synmaxcol=1000

" }}}
" -----------------------------------------------------------------------
" Formatting {{{
" -----------------------------------------------------------------------

set autoindent
set smartindent
set smarttab
set shiftwidth=2             " 2 spaces per tab
set softtabstop=2
set tabstop=2
set expandtab                " Use spaces instead of tabs

" }}}
" -----------------------------------------------------------------------
" Wildmenu {{{
" -----------------------------------------------------------------------

if has('wildmenu')
  set wildmode=list:longest,full
  set wildignorecase
  set wildignore+=*.pyc,*.spl,*.o,*.out,*~,#*#,%*
  set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.zip,**/tmp/**,*.DS_Store
endif

" }}}
" -----------------------------------------------------------------------
" Folding {{{
" -----------------------------------------------------------------------

if has('folding')
  set foldmethod=marker
  set foldtext=vimrc#foldtext()
endif

" }}}
" -----------------------------------------------------------------------
" Vim directories {{{
" -----------------------------------------------------------------------

if has('mksession')
  set viewdir=$data_dir/view/               " override ~/.vim/view default
  set viewoptions=cursor,folds              " save/restore just these (with `:{mk,load}view`)
endif

" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  if exists('$SUDO_USER')
    set noundofile                          " don't create root-owned files
  else
    set undofile                            " actually use undo files
    set undodir=$data_dir/undo//           " keep undo files out of the way
  endif
endif

if exists('$SUDO_USER')
  if has('nvim')
    set shada=
  else
    set viminfo=
  endif
else
  if has('nvim')
    set shada+=n$data_dir/main.shada
  else
    set viminfo+=n$data_dir/viminfo
  endif
endif

for s:dir in [&undodir, &viewdir]
  if !isdirectory(s:dir)
    call mkdir(s:dir, 'p')
  endif
endfor

" }}}
" -----------------------------------------------------------------------
" Behavior {{{
" -----------------------------------------------------------------------

set backspace=indent,eol,start
set completeopt=menu,menuone,longest " show PUM, even for one thing
set complete-=i                      " Don't scan includes, since it can be very slow.
set linebreak                        " Wrap lines at convenient points
set scrolloff=8                      " Start scrolling when we're 8 lines away from margins
set sidescroll=1
set sidescrolloff=15
set pumheight=20                     " Pop-up menu's line height
set splitbelow                       " Split horizontal windows below to the current windows
set splitright                       " Split vertical windows right to the current windows

" }}}
" -----------------------------------------------------------------------
" UI {{{
" -----------------------------------------------------------------------

set display=lastline
set laststatus=2
set list                          " Display tabs and trailing spaces visually
set nocursorcolumn                " speed up syntax highlighting
set nocursorline
set noshowmode                    " Don't need to show mode since we have lightline
set number                        " Show line numbers
set title                         " Sets the terminal title nicely.

set shortmess+=A                  " ignore annoying swapfile messages
set shortmess+=I                  " no splash screen
set shortmess+=O                  " file-read message overwrites previous
set shortmess+=T                  " truncate non-file messages in middle
set shortmess+=W                  " don't echo "[w]"/"[written]" when writing
set shortmess+=a                  " use abbreviations in messages eg. `[RO]` instead of `[readonly]`
set shortmess+=o                  " overwrite file-written messages
set shortmess+=t                  " truncate file messages at start

if has('linebreak')
  set linebreak
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
endif

if exists('+termguicolors')
  set t_ut=         " disable background color erase
  set termguicolors " enable true color
endif

syntax enable
set background=dark

let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
colorscheme hybrid

" Set terminal colors
let s:num = 0
for s:color in [
      \ '#2d3c46', '#a54242', '#8c9440', '#de935f',
      \ '#5f819d', '#85678f', '#5e8d87', '#6c7a80',
      \ '#425059', '#cc6666', '#b5bd67', '#f0c674',
      \ '#81a2be', '#b294ba', '#8abeb7', '#c5c8c6',
      \ ]
  let g:terminal_color_{s:num} = s:color
  let s:num += 1
endfor

" }}}
" }}}
" =======================================================================
" Mappings {{{
" =======================================================================

" disable ex mode
nnoremap  Q <Nop>
nnoremap gQ <Nop>

" disable ri check
map K <Nop>

" disable q window
map q: :q

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Better split switching
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when moving up and down
noremap <C-d> <C-d>zz
noremap <C-u> <C-u>zz

" QuickFix navigation
nnoremap ]q :cnext<CR>
nnoremap [q :cprevious<CR>

" Location list navigation
nnoremap ]l :lnext<CR>
nnoremap [l :lprevious<CR>

" Error mnemonic (Neomake uses location list)
nnoremap ]e :lnext<CR>
nnoremap [e :lprevious<CR>

" Common typos
command! W w
command! Q q
command! WQ wq
command! Wq wq

" -----------------------------------------------------------------------
" Leader Commands
" -----------------------------------------------------------------------

let g:mapleader = ','

" Edit vimrc
nnoremap <leader>ev :tabedit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Fast saving
nnoremap <leader>w :w!<cr>
nnoremap <silent> <leader>q :q!<CR>

" Remove search highlight
nnoremap <leader><CR> :nohlsearch<CR>

" Source the current Vim file
nnoremap <leader>pr :so %<CR>

" Format buffer
nmap <leader>= ggVG=<CR>

" Pressing ,ss will toggle and untoggle spell checking
nmap <leader>ss :setlocal spell!<cr>

" Sorting
vnoremap <leader>srt :sort<cr>

" Reselect last-pasted text
nnoremap gp `[v`]

" Make horizontal line
nnoremap <leader>L mzO<esc>79i-<esc>`z

" Copy to system clipboard
nnoremap <silent> <leader>y "*y
nnoremap <silent> <leader>Y "*Y
vnoremap <silent> <leader>y "*y
vnoremap <silent> <leader>Y "*Y

nnoremap <silent> <leader>,p "*p

if has('nvim')
  " Leader q to exit terminal mode. Somehow it jumps to the end, so jump to
  " the top again
  tnoremap <leader>q <C-\><C-n>gg<cr>
endif

" }}}
" =======================================================================
" Autocmds {{{
" =======================================================================

if has('autocmd')
  augroup vimrc
    autocmd!
  augroup END

  " Save files when vim loses focus
  autocmd vimrc FocusLost * silent! wall

  " remove trailing whitespace automatically
  autocmd vimrc BufWritePre * :%s/\s\+$//e

  " check timestamp more for 'autoread'
  autocmd vimrc WinEnter * checktime

  autocmd vimrc InsertEnter * :setlocal nohlsearch
  autocmd vimrc InsertLeave * :setlocal hlsearch

  autocmd vimrc BufEnter term://* startinsert
endif

" }}}
" =======================================================================
" Plugin {{{
" =======================================================================

" -----------------------------------------------------------------------
" Plugin: neomake {{{
" -----------------------------------------------------------------------

let g:neomake_warning_sign = { 'text': '❯', 'texthl': 'WarningMsg' }
let g:neomake_error_sign   = { 'text': '❯', 'texthl': 'ErrorMsg'   }

function! s:run_neomake() "{{{
  if &buftype ==# 'nofile' | return | endif

  let l:filetypes = [
        \ 'css', 'go', 'html', 'json', 'markdown',
        \ 'ruby', 'sh', 'vim', 'yaml' ]
  if index(l:filetypes, &filetype) > -1
    Neomake
  endif
endfunction "}}}
autocmd vimrc BufWritePost * call <SID>run_neomake()

" }}}
" -----------------------------------------------------------------------
" Plugin: deoplete {{{
" -----------------------------------------------------------------------

if has_key(g:plugs, 'deoplete.nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 50
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#file#enable_buffer_path = 1
  let g:deoplete#max_abbr_width = 0
  let g:deoplete#max_menu_width = 0

  call deoplete#custom#set('_', 'converters', ['converter_auto_paren', 'converter_remove_overlap', 'converter_truncate_abbr', 'converter_truncate_menu'])
  call deoplete#custom#set('_', 'matchers', ['matcher_fuzzy'])
  call deoplete#custom#set('go', 'sorters', [])

  call deoplete#custom#set('go', 'mark', '')
  call deoplete#custom#set('buffer', 'mark', 'buffer')
  call deoplete#custom#set('omni', 'mark', 'omni')
  call deoplete#custom#set('file', 'mark', 'file')

  call deoplete#custom#set('go', 'rank', 9999)

  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#json_directory = $cache_dir.'/deoplete/go/darwin_amd64'
  let g:deoplete#sources#go#package_dot = 1
  let g:deoplete#sources#go#pointer = 1
  let g:deoplete#sources#go#sort_class = ['func', 'type', 'var', 'const', 'package']
  let g:deoplete#sources#go#use_cache = 1

  if !exists('g:necovim#complete_functions')
    let g:necovim#complete_functions = {}
  endif
  let g:necovim#complete_functions.Ref = 'ref#complete'

  let g:deoplete#ignore_sources    = get(g:,'deoplete#ignore_sources',{})
  let g:deoplete#ignore_sources._  = ['around']
  let g:deoplete#ignore_sources.go = ['dictionary', 'member', 'omni', 'tag', 'syntax', 'around']

  set isfname-==

  " call deoplete#enable_logging('DEBUG', $HOME.'/.cache/deoplete.log')
  " call deoplete#custom#set('core', 'debug_enabled', 1)
  " call deoplete#custom#set('go', 'debug_enabled', 1)
  " let g:deoplete#enable_profile = 1
endif

" }}}
" -----------------------------------------------------------------------
" Plugin: vim-align {{{
" -----------------------------------------------------------------------

map      <leader>ah :Align =><CR>
nnoremap <leader>a= :Align =<CR>
map      <leader>a# :Align #<CR>
map      <leader>a{ :Align {<CR>

" }}}
" -----------------------------------------------------------------------
" Plugin: ctrlp {{{
" -----------------------------------------------------------------------

map <leader>gb :CtrlPBuffer<CR>
map <leader>gt :CtrlPBufTag<CR>
map <leader>gc :CtrlP app/controllers<CR>
map <leader>gm :CtrlP app/models<CR>
map <leader>gv :CtrlP app/views<CR>
map <leader>gl :CtrlP lib<CR>
map <leader>gs :CtrlP spec<CR>

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -i --nogroup -l --nocolor --hidden --ignore ''BUILD'' --ignore ''_output'' -g ""'

" ag is fast enough that CtrlP doesn't need to cache
let g:ctrlp_use_caching = 0

" Set no file limit, we are building a big project
let g:ctrlp_max_files = 0

" Use python fuzzy matcher for better performance
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ft'}

" }}}
" -----------------------------------------------------------------------
" Plguin: nerdtree {{{
" -----------------------------------------------------------------------

let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeIgnore=['\.git$', '\.gitignore', '\.zwc', '^BUILD$']
let g:NERDTreeShowHidden=1
let g:NERDTreeMapJumpNextSibling='<Nop>'
let g:NERDTreeMapJumpPrevSibling='<Nop>'
let g:NERDTreeMinimalUI=1

noremap <leader>e :NERDTreeFind<CR>
noremap <Leader>n :NERDTreeToggle<cr>

" }}}
" -----------------------------------------------------------------------
" Plguin: easyalign {{{
" -----------------------------------------------------------------------

vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" }}}
" -----------------------------------------------------------------------
" Plguin: tagbar {{{
" -----------------------------------------------------------------------

map <leader>tt :TagbarToggle<cr>

" }}}
" -----------------------------------------------------------------------
" Plguin: ag {{{
" -----------------------------------------------------------------------

if executable('ag')
  let &grepprg='ag --nocolor --nogroup --hidden --vimgrep'
  let g:ag_prg='ag --nocolor --nogroup --hidden --column'

  map <leader>a :Ag<space>
  map <leader>a* :call SearchWordWithAg()<CR>

  function! SearchWordWithAg()
    execute 'Ag' expand('<cword>')
  endfunction
endif

" }}}
" -----------------------------------------------------------------------
" Plguin: fzf {{{
" -----------------------------------------------------------------------

if has('nvim')
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif

let g:fzf_nvim_statusline = 0

nmap <silent> <leader>t :FZF<cr>
nnoremap <silent> <c-b>  :Buffers<cr>

" }}}
" -----------------------------------------------------------------------
" Plguin: delimitmate {{{
" -----------------------------------------------------------------------

let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1

" }}}
" -----------------------------------------------------------------------
" Plguin: quick-scope {{{
" -----------------------------------------------------------------------

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" }}}
" -----------------------------------------------------------------------
" Plugin: committia.vim {{{
" -----------------------------------------------------------------------

let g:committia_open_only_vim_starting = 0
let g:committia_use_singlecolumn       = 'always'

" }}}
" -----------------------------------------------------------------------
" vim: foldmethod=marker
