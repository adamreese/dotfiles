" =======================================================================
" ~/.vimrc
" =======================================================================

" vim-plug Initialization
" -----------------------------------------------------------------------
" This loads all the plugins specified in ~/.vim/vimrc.bundles
if filereadable(expand("~/.vim/vimrc.bundles"))
  source ~/.vim/vimrc.bundles
endif

if !has('nvim')
  set nocompatible
  filetype off
  filetype plugin indent on

  set ttyfast
  set ttymouse=xterm2
  set ttyscroll=3

  set laststatus=2
  set encoding=utf-8              " Set default encoding to UTF-8
  set autoread                    " Reload files changed outside vim
  set autoindent
  set backspace=indent,eol,start  " Allow backspace in insert mode
  set incsearch                   " Shows the match while typing
  set hlsearch                    " Highlight search results
endif

" General Config
" -----------------------------------------------------------------------
set fileformats+=mac
set gcr=a:blinkon0         " Disable cursor blink
set hidden                 " Better buffer management
set history=1000           " Store lots of :cmdline history
set number                 " Line numbers are good
set shell=/bin/bash
set showcmd                " Show incomplete cmds down the bottom
set scrolloff=7            " Set 7 lines to the cursor - when moving vertically using j/k
set visualbell             " No sounds
set noerrorbells           " No beeps

set splitright             " Split vertical windows right to the current windows
set splitbelow             " Split horizontal windows below to the current windows
set nocursorcolumn         " Do not highlight column
set nocursorline           " Do not highlight line
set ignorecase             " Ignore case when searching
set magic                  " For regular expressions turn magic on
set mat=2                  " How many tenths of a second to blink when matching brackets
set noshowmatch            " Don't show matching brackets when text indicator is over them
set smartcase              " When searching try to be smart about cases
set tabpagemax=15          " Only show 15 tabs
set linebreak              " Wrap lines at convenient points
set noshowmode             " We show the mode with airline or lightline
set noswapfile             " Don't use swapfile
set nobackup               " Don't create annoying backup files
set nowb

set lazyredraw             " Don't redraw while executing macros (good performance config)
syntax sync minlines=256   " Start highlighting from 256 lines backwards
set synmaxcol=300          " Do not highlith very long lines

" Indentation
" -----------------------------------------------------------------------
set smartindent
set smarttab
set shiftwidth=2          " 2 spaces per tab
set softtabstop=2
set tabstop=2
set expandtab             " Use spaces instead of tabs

" Display tabs and trailing spaces visually
set list listchars=tab:>-,trail:*

" Completion
" -----------------------------------------------------------------------
set wildmenu                " enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:longest
set complete-=i             " do not scan included files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log,.git
set completeopt=longest,menuone
set pumheight=10             " completion window max size

" Scrolling
" -----------------------------------------------------------------------
set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
if !has('gui_running')
  set notimeout
  set ttimeout
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
  autocmd bufwritepost .vimrc.bundles source $MYVIMRC

  " Save files when vim loses focus
  autocmd FocusLost * silent! wall
endif


" UI
" -----------------------------------------------------------------------
set t_Co=256
syntax enable
set background=dark

colorscheme hybrid

highlight clear SignColumn " SignColumn should match background

" Persistent Undo
" -----------------------------------------------------------------------
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" Mappings
" -----------------------------------------------------------------------
let mapleader=","

" Edit the vimrc file
nmap <leader>ev :tabedit $MYVIMRC<CR>
nmap <leader>evb :tabedit $MYVIMRC.bundles<CR>

" disable ex mode
map Q <Nop>

" disable ri check
map K <Nop>

" disable q window
map q: :q

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when moving up and down
noremap <C-d> <C-d>zz
noremap <C-u> <C-u>zz

" Easy buffer navigation
noremap <leader>bp :bprevious<cr>
noremap <leader>bn :bnext<cr>

" Splits ,v and ,h to open new splits (vertical and horizontal)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Save and quit
nmap <leader>wq :w!<cr>:bdelete<cr>

" Tabs
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>

" Format buffer
map <leader>= ggVG=<CR>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Faster saving
map <silent> <leader>w :w<cr>
map <silent> <leader>wa :wa<cr>

map <silent> <leader>q :q<cr>

map <silent> <leader>bn :bnext<cr>
map <silent> <leader>bd :bdelete<cr>

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" Delete empty lines
nmap <leader>del :g/^$/d<cr>

" Sorting
map <leader>srt :sort<cr>

" remove trailing whitespace automatically
autocmd BufWritePre * :%s/\s\+$//e

map <leader>r19 :s/\v:([0-9a-z_]+)\s+\=\>\s+/\1: /g<CR>
map <leader>r18 :s/\v([0-9a-z_"']+):\s+(.*)/:\1 => \2/g<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Functions
" -----------------------------------------------------------------------

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Plugin Settings
" -----------------------------------------------------------------------

" ag
set grepprg=ag\ --nogroup\ --nocolor
if &grepformat !~# '%c'
  set grepformat^=%f:%l:%c:%m
endif

map <leader>a :Ag<space>
map <leader>a* :Ag<space><cword><CR>
"let g:ag_prg="ag --vimgrep --smart-case --nogroup --nocolor --skip-vcs-ignores"

" vim-align
map <leader>ah :Align =><CR>
nnoremap <leader>a= :Align =<CR>
map <leader>a# :Align #<CR>
map <leader>a{ :Align {<CR>

" CtrlP
map <leader>cf :ClearCtrlPCache<CR>
map <leader>gb :CtrlPBuffer<CR>
map <leader>gt :CtrlPBufTag<CR>
map <leader>gc :CtrlP app/controllers<CR>
map <leader>gm :CtrlP app/models<CR>
map <leader>gv :CtrlP app/views<CR>
map <leader>gl :CtrlP lib<CR>
map <leader>gs :CtrlP spec<CR>

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" ag is fast enough that CtrlP doesn't need to cache
let g:ctrlp_use_caching = 0

let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ft'}

" nerdtree
let g:NERDTreeMinimalUI=1
map <leader>e :NERDTreeFind<CR>

" EasyAlign
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" tagbar
map <leader>tt :TagbarToggle<cr>

" airline
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tagbar#enabled = 0
let g:airline_left_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_sep=''
let g:airline_right_alt_sep=''

if has('nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#ignore_sources = {}
  let g:deoplete#ignore_sources._ = ['buffer', 'member', 'tag', 'file', 'neosnippet']
  let g:deoplete#sources#go#sort_class = ['func', 'type', 'var', 'const']

  " Use partial fuzzy matches like YouCompleteMe
  call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])
else
  " neocomplete
  let g:acp_enableAtStartup = 0                           " Disable AutoComplPop
  let g:neocomplete#enable_at_startup = 1                 " Use neocomplete
  let g:neocomplete#enable_smart_case = 0                 " Use smartcase
  let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
  let g:neocomplete#max_list = 15

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
endif

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Neosnippet
" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
