#!/usr/bin/env bash
set -euo pipefail

((${TRACE-})) && set -x

rule() {
  local cols=80 char=$'\u2500'
  printf '%*s\n' "${cols}" '' | tr ' ' "${char}"
}

header() {
  local msg="$*"

  rule
  printf '\033[0;32m%s\033[0;m\n' "$msg"
  rule
}

sync_repo() {
  local repo="${1:-.}"

  trap 'echo "Failed pulling ${repo}\nAborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo "${repo} is not a git repo"
    return
  fi

  git -c gc.auto=0 fetch --quiet --no-tags --recurse-submodules=no >/dev/null 2>&1

  if [[ -n "$(git status --porcelain --ignore-submodules -unormal)" ]]; then
    echo "${repo} has uncommitted changes"
    return
  fi

  localbranch=$(git symbolic-ref --short HEAD)

  if ((reset_head)); then
    defaultbranch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)

    if [[ $defaultbranch != "$localbranch" ]]; then
      header "$repo: $defaultbranch"
      git remote set-head origin --auto
      git switch "${defaultbranch}"
    fi
  fi

  local behind
  behind=$(git rev-list --right-only --count HEAD...@'{u}' 2>/dev/null)
  if ((behind)); then
    header "Updating ${repo}:${localbranch}"

    git pull --quiet

    git --no-pager log --no-merges --stat --color ORIG_HEAD..
  fi
}

main() {
  export GHQ_ROOT="${PWD}"

  while read -r repo; do
    (
      cd "${repo}"
      sync_repo "${repo}"
    )
  done < <(ghq list)
}

reset_head=0
while (($#)); do
  case "$1" in
  -r | --reset-head)
    reset_head=1
    ;;
  *)
    break # end of options, just arguments left
    ;;
  esac
  shift
done

main "$@"
